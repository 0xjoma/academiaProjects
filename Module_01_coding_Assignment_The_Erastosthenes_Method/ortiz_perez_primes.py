import math
import matplotlib.pyplot as plt
from timeit import default_timer as timer


def eratosthenes(n):
    # Create a list of consecutive integers from 2 to n
    sieve = list(range(0, n+1))

    # 0 and 1 are not prime, mark them as such
    sieve[0] = sieve[1] = 0

    for i in range(2, int(math.sqrt(n)) + 1):
        if sieve[i] != 0:
            # Mark multiples of i as 0 (not prime)
            for j in range(i * i, n + 1, i):
                sieve[j] = 0

    # Create a list of prime numbers (non-zero elements)
    primes = []
    for num in sieve:
        if num != 0:
            primes.append(num)
    return primes


def isPrime(num):
    # Check if a number is prime
    if num < 2:
        return False
    # Check divisibility up to square root of num
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True


def brute_force(n):
    # Generate primes up to n using brute force method
    primes = []
    for i in range(2, n + 1):
        if isPrime(i):
            primes.append(i)
    return primes


# Test for n = 100
n_test = 100
primes_100 = eratosthenes(n_test)
print(f"Primes up to {n_test}:")
print(primes_100)

# Timing comparison for n = 200,000
n = 200000

# Time the brute force method
start = timer()
list_brute = brute_force(n)
end = timer()
time_brute = end - start
print(f"Brute force time: {time_brute:.4f} seconds")

# Time the Sieve of Eratosthenes method
start = timer()
list_sieve = eratosthenes(n)
end = timer()
time_sieve = end - start
print(f"Sieve of Eratosthenes time: {time_sieve:.4f} seconds")

# Plot the primes generated by the Sieve of Eratosthenes
plt.figure(figsize=(12, 6))  # Set the figure size
plt.hist(list_sieve, bins=100, edgecolor='black')  # Create a histogram
plt.title('Prime Distribution (Sieve of Eratosthenes)')  # Set the title
plt.xlabel('Prime Numbers')  # Set the x-axis label
plt.ylabel('Frequency')  # Set the y-axis label
plt.show()  # Display the plot
